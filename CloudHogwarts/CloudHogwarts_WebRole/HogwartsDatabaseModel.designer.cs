#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.237
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace CloudHogwarts_WebRole
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="HogwartsDatabase")]
	public partial class HogwartsDatabaseModelDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertArticle(Article instance);
    partial void UpdateArticle(Article instance);
    partial void DeleteArticle(Article instance);
    partial void InsertStudentRequest(StudentRequest instance);
    partial void UpdateStudentRequest(StudentRequest instance);
    partial void DeleteStudentRequest(StudentRequest instance);
    partial void InsertCourse(Course instance);
    partial void UpdateCourse(Course instance);
    partial void DeleteCourse(Course instance);
    partial void InsertDepartment(Department instance);
    partial void UpdateDepartment(Department instance);
    partial void DeleteDepartment(Department instance);
    partial void InsertDiscipline(Discipline instance);
    partial void UpdateDiscipline(Discipline instance);
    partial void DeleteDiscipline(Discipline instance);
    partial void InsertHouse(House instance);
    partial void UpdateHouse(House instance);
    partial void DeleteHouse(House instance);
    partial void InsertSemester(Semester instance);
    partial void UpdateSemester(Semester instance);
    partial void DeleteSemester(Semester instance);
    partial void InsertSession(Session instance);
    partial void UpdateSession(Session instance);
    partial void DeleteSession(Session instance);
    partial void InsertStaff(Staff instance);
    partial void UpdateStaff(Staff instance);
    partial void DeleteStaff(Staff instance);
    partial void InsertStudent(Student instance);
    partial void UpdateStudent(Student instance);
    partial void DeleteStudent(Student instance);
    partial void InsertStudentInCourse(StudentInCourse instance);
    partial void UpdateStudentInCourse(StudentInCourse instance);
    partial void DeleteStudentInCourse(StudentInCourse instance);
    #endregion
		
		public HogwartsDatabaseModelDataContext() : 
				base(global::System.Configuration.ConfigurationManager.ConnectionStrings["HogwartsDatabaseConnectionString"].ConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public HogwartsDatabaseModelDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public HogwartsDatabaseModelDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public HogwartsDatabaseModelDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public HogwartsDatabaseModelDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Article> Articles
		{
			get
			{
				return this.GetTable<Article>();
			}
		}
		
		public System.Data.Linq.Table<StudentRequest> StudentRequests
		{
			get
			{
				return this.GetTable<StudentRequest>();
			}
		}
		
		public System.Data.Linq.Table<Course> Courses
		{
			get
			{
				return this.GetTable<Course>();
			}
		}
		
		public System.Data.Linq.Table<Department> Departments
		{
			get
			{
				return this.GetTable<Department>();
			}
		}
		
		public System.Data.Linq.Table<Discipline> Disciplines
		{
			get
			{
				return this.GetTable<Discipline>();
			}
		}
		
		public System.Data.Linq.Table<House> Houses
		{
			get
			{
				return this.GetTable<House>();
			}
		}
		
		public System.Data.Linq.Table<Semester> Semesters
		{
			get
			{
				return this.GetTable<Semester>();
			}
		}
		
		public System.Data.Linq.Table<Session> Sessions
		{
			get
			{
				return this.GetTable<Session>();
			}
		}
		
		public System.Data.Linq.Table<Staff> Staffs
		{
			get
			{
				return this.GetTable<Staff>();
			}
		}
		
		public System.Data.Linq.Table<Student> Students
		{
			get
			{
				return this.GetTable<Student>();
			}
		}
		
		public System.Data.Linq.Table<StudentInCourse> StudentInCourses
		{
			get
			{
				return this.GetTable<StudentInCourse>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Article")]
	public partial class Article : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ArticleID;
		
		private string _Title;
		
		private string _Content;
		
		private int _StaffID;
		
		private System.DateTime _DateTime;
		
		private EntityRef<Staff> _Staff;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnArticleIDChanging(int value);
    partial void OnArticleIDChanged();
    partial void OnTitleChanging(string value);
    partial void OnTitleChanged();
    partial void OnContentChanging(string value);
    partial void OnContentChanged();
    partial void OnStaffIDChanging(int value);
    partial void OnStaffIDChanged();
    partial void OnDateTimeChanging(System.DateTime value);
    partial void OnDateTimeChanged();
    #endregion
		
		public Article()
		{
			this._Staff = default(EntityRef<Staff>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ArticleID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ArticleID
		{
			get
			{
				return this._ArticleID;
			}
			set
			{
				if ((this._ArticleID != value))
				{
					this.OnArticleIDChanging(value);
					this.SendPropertyChanging();
					this._ArticleID = value;
					this.SendPropertyChanged("ArticleID");
					this.OnArticleIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Title", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string Title
		{
			get
			{
				return this._Title;
			}
			set
			{
				if ((this._Title != value))
				{
					this.OnTitleChanging(value);
					this.SendPropertyChanging();
					this._Title = value;
					this.SendPropertyChanged("Title");
					this.OnTitleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Content", DbType="Text", UpdateCheck=UpdateCheck.Never)]
		public string Content
		{
			get
			{
				return this._Content;
			}
			set
			{
				if ((this._Content != value))
				{
					this.OnContentChanging(value);
					this.SendPropertyChanging();
					this._Content = value;
					this.SendPropertyChanged("Content");
					this.OnContentChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StaffID", DbType="Int NOT NULL")]
		public int StaffID
		{
			get
			{
				return this._StaffID;
			}
			set
			{
				if ((this._StaffID != value))
				{
					if (this._Staff.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnStaffIDChanging(value);
					this.SendPropertyChanging();
					this._StaffID = value;
					this.SendPropertyChanged("StaffID");
					this.OnStaffIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateTime", DbType="DateTime NOT NULL")]
		public System.DateTime DateTime
		{
			get
			{
				return this._DateTime;
			}
			set
			{
				if ((this._DateTime != value))
				{
					this.OnDateTimeChanging(value);
					this.SendPropertyChanging();
					this._DateTime = value;
					this.SendPropertyChanged("DateTime");
					this.OnDateTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Staff_Article", Storage="_Staff", ThisKey="StaffID", OtherKey="StaffID", IsForeignKey=true)]
		public Staff Staff
		{
			get
			{
				return this._Staff.Entity;
			}
			set
			{
				Staff previousValue = this._Staff.Entity;
				if (((previousValue != value) 
							|| (this._Staff.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Staff.Entity = null;
						previousValue.Articles.Remove(this);
					}
					this._Staff.Entity = value;
					if ((value != null))
					{
						value.Articles.Add(this);
						this._StaffID = value.StaffID;
					}
					else
					{
						this._StaffID = default(int);
					}
					this.SendPropertyChanged("Staff");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.StudentRequest")]
	public partial class StudentRequest : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _StudentID;
		
		private string _NewFirstName;
		
		private string _NewLastName;
		
		private string _NewNationality;
		
		private string _NewMMailAddress;
		
		private string _NewHouseName;
		
		private int _RequestID;
		
		private EntityRef<Student> _Student;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnStudentIDChanging(int value);
    partial void OnStudentIDChanged();
    partial void OnNewFirstNameChanging(string value);
    partial void OnNewFirstNameChanged();
    partial void OnNewLastNameChanging(string value);
    partial void OnNewLastNameChanged();
    partial void OnNewNationalityChanging(string value);
    partial void OnNewNationalityChanged();
    partial void OnNewMMailAddressChanging(string value);
    partial void OnNewMMailAddressChanged();
    partial void OnNewHouseNameChanging(string value);
    partial void OnNewHouseNameChanged();
    partial void OnRequestIDChanging(int value);
    partial void OnRequestIDChanged();
    #endregion
		
		public StudentRequest()
		{
			this._Student = default(EntityRef<Student>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StudentID", DbType="Int NOT NULL")]
		public int StudentID
		{
			get
			{
				return this._StudentID;
			}
			set
			{
				if ((this._StudentID != value))
				{
					if (this._Student.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnStudentIDChanging(value);
					this.SendPropertyChanging();
					this._StudentID = value;
					this.SendPropertyChanged("StudentID");
					this.OnStudentIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NewFirstName", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string NewFirstName
		{
			get
			{
				return this._NewFirstName;
			}
			set
			{
				if ((this._NewFirstName != value))
				{
					this.OnNewFirstNameChanging(value);
					this.SendPropertyChanging();
					this._NewFirstName = value;
					this.SendPropertyChanged("NewFirstName");
					this.OnNewFirstNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NewLastName", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string NewLastName
		{
			get
			{
				return this._NewLastName;
			}
			set
			{
				if ((this._NewLastName != value))
				{
					this.OnNewLastNameChanging(value);
					this.SendPropertyChanging();
					this._NewLastName = value;
					this.SendPropertyChanged("NewLastName");
					this.OnNewLastNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NewNationality", DbType="VarChar(100) NOT NULL", CanBeNull=false)]
		public string NewNationality
		{
			get
			{
				return this._NewNationality;
			}
			set
			{
				if ((this._NewNationality != value))
				{
					this.OnNewNationalityChanging(value);
					this.SendPropertyChanging();
					this._NewNationality = value;
					this.SendPropertyChanged("NewNationality");
					this.OnNewNationalityChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NewMMailAddress", DbType="VarChar(100) NOT NULL", CanBeNull=false)]
		public string NewMMailAddress
		{
			get
			{
				return this._NewMMailAddress;
			}
			set
			{
				if ((this._NewMMailAddress != value))
				{
					this.OnNewMMailAddressChanging(value);
					this.SendPropertyChanging();
					this._NewMMailAddress = value;
					this.SendPropertyChanged("NewMMailAddress");
					this.OnNewMMailAddressChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NewHouseName", DbType="VarChar(100) NOT NULL", CanBeNull=false)]
		public string NewHouseName
		{
			get
			{
				return this._NewHouseName;
			}
			set
			{
				if ((this._NewHouseName != value))
				{
					this.OnNewHouseNameChanging(value);
					this.SendPropertyChanging();
					this._NewHouseName = value;
					this.SendPropertyChanged("NewHouseName");
					this.OnNewHouseNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RequestID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int RequestID
		{
			get
			{
				return this._RequestID;
			}
			set
			{
				if ((this._RequestID != value))
				{
					this.OnRequestIDChanging(value);
					this.SendPropertyChanging();
					this._RequestID = value;
					this.SendPropertyChanged("RequestID");
					this.OnRequestIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Student_StudentRequest", Storage="_Student", ThisKey="StudentID", OtherKey="StudentID", IsForeignKey=true)]
		public Student Student
		{
			get
			{
				return this._Student.Entity;
			}
			set
			{
				Student previousValue = this._Student.Entity;
				if (((previousValue != value) 
							|| (this._Student.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Student.Entity = null;
						previousValue.StudentRequests.Remove(this);
					}
					this._Student.Entity = value;
					if ((value != null))
					{
						value.StudentRequests.Add(this);
						this._StudentID = value.StudentID;
					}
					else
					{
						this._StudentID = default(int);
					}
					this.SendPropertyChanged("Student");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Course")]
	public partial class Course : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _CourseID;
		
		private int _SemesterID;
		
		private int _DisciplineID;
		
		private int _StaffID;
		
		private System.Nullable<int> _AttendeeNumber;
		
		private System.Nullable<int> _MaxCapacity;
		
		private EntitySet<Session> _Sessions;
		
		private EntitySet<StudentInCourse> _StudentInCourses;
		
		private EntityRef<Discipline> _Discipline;
		
		private EntityRef<Semester> _Semester;
		
		private EntityRef<Staff> _Staff;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCourseIDChanging(int value);
    partial void OnCourseIDChanged();
    partial void OnSemesterIDChanging(int value);
    partial void OnSemesterIDChanged();
    partial void OnDisciplineIDChanging(int value);
    partial void OnDisciplineIDChanged();
    partial void OnStaffIDChanging(int value);
    partial void OnStaffIDChanged();
    partial void OnAttendeeNumberChanging(System.Nullable<int> value);
    partial void OnAttendeeNumberChanged();
    partial void OnMaxCapacityChanging(System.Nullable<int> value);
    partial void OnMaxCapacityChanged();
    #endregion
		
		public Course()
		{
			this._Sessions = new EntitySet<Session>(new Action<Session>(this.attach_Sessions), new Action<Session>(this.detach_Sessions));
			this._StudentInCourses = new EntitySet<StudentInCourse>(new Action<StudentInCourse>(this.attach_StudentInCourses), new Action<StudentInCourse>(this.detach_StudentInCourses));
			this._Discipline = default(EntityRef<Discipline>);
			this._Semester = default(EntityRef<Semester>);
			this._Staff = default(EntityRef<Staff>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CourseID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int CourseID
		{
			get
			{
				return this._CourseID;
			}
			set
			{
				if ((this._CourseID != value))
				{
					this.OnCourseIDChanging(value);
					this.SendPropertyChanging();
					this._CourseID = value;
					this.SendPropertyChanged("CourseID");
					this.OnCourseIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SemesterID", DbType="Int NOT NULL")]
		public int SemesterID
		{
			get
			{
				return this._SemesterID;
			}
			set
			{
				if ((this._SemesterID != value))
				{
					if (this._Semester.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSemesterIDChanging(value);
					this.SendPropertyChanging();
					this._SemesterID = value;
					this.SendPropertyChanged("SemesterID");
					this.OnSemesterIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DisciplineID", DbType="Int NOT NULL")]
		public int DisciplineID
		{
			get
			{
				return this._DisciplineID;
			}
			set
			{
				if ((this._DisciplineID != value))
				{
					if (this._Discipline.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnDisciplineIDChanging(value);
					this.SendPropertyChanging();
					this._DisciplineID = value;
					this.SendPropertyChanged("DisciplineID");
					this.OnDisciplineIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StaffID", DbType="Int NOT NULL")]
		public int StaffID
		{
			get
			{
				return this._StaffID;
			}
			set
			{
				if ((this._StaffID != value))
				{
					if (this._Staff.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnStaffIDChanging(value);
					this.SendPropertyChanging();
					this._StaffID = value;
					this.SendPropertyChanged("StaffID");
					this.OnStaffIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AttendeeNumber", DbType="Int")]
		public System.Nullable<int> AttendeeNumber
		{
			get
			{
				return this._AttendeeNumber;
			}
			set
			{
				if ((this._AttendeeNumber != value))
				{
					this.OnAttendeeNumberChanging(value);
					this.SendPropertyChanging();
					this._AttendeeNumber = value;
					this.SendPropertyChanged("AttendeeNumber");
					this.OnAttendeeNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MaxCapacity", DbType="Int")]
		public System.Nullable<int> MaxCapacity
		{
			get
			{
				return this._MaxCapacity;
			}
			set
			{
				if ((this._MaxCapacity != value))
				{
					this.OnMaxCapacityChanging(value);
					this.SendPropertyChanging();
					this._MaxCapacity = value;
					this.SendPropertyChanged("MaxCapacity");
					this.OnMaxCapacityChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Course_Session", Storage="_Sessions", ThisKey="CourseID", OtherKey="CourseID")]
		public EntitySet<Session> Sessions
		{
			get
			{
				return this._Sessions;
			}
			set
			{
				this._Sessions.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Course_StudentInCourse", Storage="_StudentInCourses", ThisKey="CourseID", OtherKey="CourseID")]
		public EntitySet<StudentInCourse> StudentInCourses
		{
			get
			{
				return this._StudentInCourses;
			}
			set
			{
				this._StudentInCourses.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Discipline_Course", Storage="_Discipline", ThisKey="DisciplineID", OtherKey="DisciplineID", IsForeignKey=true)]
		public Discipline Discipline
		{
			get
			{
				return this._Discipline.Entity;
			}
			set
			{
				Discipline previousValue = this._Discipline.Entity;
				if (((previousValue != value) 
							|| (this._Discipline.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Discipline.Entity = null;
						previousValue.Courses.Remove(this);
					}
					this._Discipline.Entity = value;
					if ((value != null))
					{
						value.Courses.Add(this);
						this._DisciplineID = value.DisciplineID;
					}
					else
					{
						this._DisciplineID = default(int);
					}
					this.SendPropertyChanged("Discipline");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Semester_Course", Storage="_Semester", ThisKey="SemesterID", OtherKey="SemesterID", IsForeignKey=true)]
		public Semester Semester
		{
			get
			{
				return this._Semester.Entity;
			}
			set
			{
				Semester previousValue = this._Semester.Entity;
				if (((previousValue != value) 
							|| (this._Semester.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Semester.Entity = null;
						previousValue.Courses.Remove(this);
					}
					this._Semester.Entity = value;
					if ((value != null))
					{
						value.Courses.Add(this);
						this._SemesterID = value.SemesterID;
					}
					else
					{
						this._SemesterID = default(int);
					}
					this.SendPropertyChanged("Semester");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Staff_Course", Storage="_Staff", ThisKey="StaffID", OtherKey="StaffID", IsForeignKey=true)]
		public Staff Staff
		{
			get
			{
				return this._Staff.Entity;
			}
			set
			{
				Staff previousValue = this._Staff.Entity;
				if (((previousValue != value) 
							|| (this._Staff.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Staff.Entity = null;
						previousValue.Courses.Remove(this);
					}
					this._Staff.Entity = value;
					if ((value != null))
					{
						value.Courses.Add(this);
						this._StaffID = value.StaffID;
					}
					else
					{
						this._StaffID = default(int);
					}
					this.SendPropertyChanged("Staff");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Sessions(Session entity)
		{
			this.SendPropertyChanging();
			entity.Course = this;
		}
		
		private void detach_Sessions(Session entity)
		{
			this.SendPropertyChanging();
			entity.Course = null;
		}
		
		private void attach_StudentInCourses(StudentInCourse entity)
		{
			this.SendPropertyChanging();
			entity.Course = this;
		}
		
		private void detach_StudentInCourses(StudentInCourse entity)
		{
			this.SendPropertyChanging();
			entity.Course = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Department")]
	public partial class Department : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _DepartmentID;
		
		private string _Name;
		
		private string _Description;
		
		private System.Nullable<int> _StudentNumber;
		
		private System.Nullable<int> _StaffNumber;
		
		private System.Nullable<int> _DisciplineNumber;
		
		private System.Nullable<int> _DepartmentDeanID;
		
		private EntitySet<Discipline> _Disciplines;
		
		private EntitySet<Staff> _Staffs;
		
		private EntitySet<Student> _Students;
		
		private EntityRef<Staff> _Staff;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnDepartmentIDChanging(int value);
    partial void OnDepartmentIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnStudentNumberChanging(System.Nullable<int> value);
    partial void OnStudentNumberChanged();
    partial void OnStaffNumberChanging(System.Nullable<int> value);
    partial void OnStaffNumberChanged();
    partial void OnDisciplineNumberChanging(System.Nullable<int> value);
    partial void OnDisciplineNumberChanged();
    partial void OnDepartmentDeanIDChanging(System.Nullable<int> value);
    partial void OnDepartmentDeanIDChanged();
    #endregion
		
		public Department()
		{
			this._Disciplines = new EntitySet<Discipline>(new Action<Discipline>(this.attach_Disciplines), new Action<Discipline>(this.detach_Disciplines));
			this._Staffs = new EntitySet<Staff>(new Action<Staff>(this.attach_Staffs), new Action<Staff>(this.detach_Staffs));
			this._Students = new EntitySet<Student>(new Action<Student>(this.attach_Students), new Action<Student>(this.detach_Students));
			this._Staff = default(EntityRef<Staff>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DepartmentID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int DepartmentID
		{
			get
			{
				return this._DepartmentID;
			}
			set
			{
				if ((this._DepartmentID != value))
				{
					this.OnDepartmentIDChanging(value);
					this.SendPropertyChanging();
					this._DepartmentID = value;
					this.SendPropertyChanged("DepartmentID");
					this.OnDepartmentIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(100) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="VarChar(1000) NOT NULL", CanBeNull=false)]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StudentNumber", DbType="Int")]
		public System.Nullable<int> StudentNumber
		{
			get
			{
				return this._StudentNumber;
			}
			set
			{
				if ((this._StudentNumber != value))
				{
					this.OnStudentNumberChanging(value);
					this.SendPropertyChanging();
					this._StudentNumber = value;
					this.SendPropertyChanged("StudentNumber");
					this.OnStudentNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StaffNumber", DbType="Int")]
		public System.Nullable<int> StaffNumber
		{
			get
			{
				return this._StaffNumber;
			}
			set
			{
				if ((this._StaffNumber != value))
				{
					this.OnStaffNumberChanging(value);
					this.SendPropertyChanging();
					this._StaffNumber = value;
					this.SendPropertyChanged("StaffNumber");
					this.OnStaffNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DisciplineNumber", DbType="Int")]
		public System.Nullable<int> DisciplineNumber
		{
			get
			{
				return this._DisciplineNumber;
			}
			set
			{
				if ((this._DisciplineNumber != value))
				{
					this.OnDisciplineNumberChanging(value);
					this.SendPropertyChanging();
					this._DisciplineNumber = value;
					this.SendPropertyChanged("DisciplineNumber");
					this.OnDisciplineNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DepartmentDeanID", DbType="Int")]
		public System.Nullable<int> DepartmentDeanID
		{
			get
			{
				return this._DepartmentDeanID;
			}
			set
			{
				if ((this._DepartmentDeanID != value))
				{
					if (this._Staff.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnDepartmentDeanIDChanging(value);
					this.SendPropertyChanging();
					this._DepartmentDeanID = value;
					this.SendPropertyChanged("DepartmentDeanID");
					this.OnDepartmentDeanIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Department_Discipline", Storage="_Disciplines", ThisKey="DepartmentID", OtherKey="DepartmentID")]
		public EntitySet<Discipline> Disciplines
		{
			get
			{
				return this._Disciplines;
			}
			set
			{
				this._Disciplines.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Department_Staff", Storage="_Staffs", ThisKey="DepartmentID", OtherKey="DepartmentID")]
		public EntitySet<Staff> Staffs
		{
			get
			{
				return this._Staffs;
			}
			set
			{
				this._Staffs.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Department_Student", Storage="_Students", ThisKey="DepartmentID", OtherKey="DepartmentID")]
		public EntitySet<Student> Students
		{
			get
			{
				return this._Students;
			}
			set
			{
				this._Students.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Staff_Department", Storage="_Staff", ThisKey="DepartmentDeanID", OtherKey="StaffID", IsForeignKey=true)]
		public Staff Staff
		{
			get
			{
				return this._Staff.Entity;
			}
			set
			{
				Staff previousValue = this._Staff.Entity;
				if (((previousValue != value) 
							|| (this._Staff.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Staff.Entity = null;
						previousValue.Departments.Remove(this);
					}
					this._Staff.Entity = value;
					if ((value != null))
					{
						value.Departments.Add(this);
						this._DepartmentDeanID = value.StaffID;
					}
					else
					{
						this._DepartmentDeanID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Staff");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Disciplines(Discipline entity)
		{
			this.SendPropertyChanging();
			entity.Department = this;
		}
		
		private void detach_Disciplines(Discipline entity)
		{
			this.SendPropertyChanging();
			entity.Department = null;
		}
		
		private void attach_Staffs(Staff entity)
		{
			this.SendPropertyChanging();
			entity.Department = this;
		}
		
		private void detach_Staffs(Staff entity)
		{
			this.SendPropertyChanging();
			entity.Department = null;
		}
		
		private void attach_Students(Student entity)
		{
			this.SendPropertyChanging();
			entity.Department = this;
		}
		
		private void detach_Students(Student entity)
		{
			this.SendPropertyChanging();
			entity.Department = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Discipline")]
	public partial class Discipline : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _DisciplineID;
		
		private string _Name;
		
		private string _Description;
		
		private int _CreditNumber;
		
		private int _PeriodPerWeek;
		
		private System.Nullable<int> _DepartmentID;
		
		private EntitySet<Course> _Courses;
		
		private EntityRef<Department> _Department;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnDisciplineIDChanging(int value);
    partial void OnDisciplineIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnCreditNumberChanging(int value);
    partial void OnCreditNumberChanged();
    partial void OnPeriodPerWeekChanging(int value);
    partial void OnPeriodPerWeekChanged();
    partial void OnDepartmentIDChanging(System.Nullable<int> value);
    partial void OnDepartmentIDChanged();
    #endregion
		
		public Discipline()
		{
			this._Courses = new EntitySet<Course>(new Action<Course>(this.attach_Courses), new Action<Course>(this.detach_Courses));
			this._Department = default(EntityRef<Department>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DisciplineID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int DisciplineID
		{
			get
			{
				return this._DisciplineID;
			}
			set
			{
				if ((this._DisciplineID != value))
				{
					this.OnDisciplineIDChanging(value);
					this.SendPropertyChanging();
					this._DisciplineID = value;
					this.SendPropertyChanged("DisciplineID");
					this.OnDisciplineIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(100) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="VarChar(1000) NOT NULL", CanBeNull=false)]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreditNumber", DbType="Int NOT NULL")]
		public int CreditNumber
		{
			get
			{
				return this._CreditNumber;
			}
			set
			{
				if ((this._CreditNumber != value))
				{
					this.OnCreditNumberChanging(value);
					this.SendPropertyChanging();
					this._CreditNumber = value;
					this.SendPropertyChanged("CreditNumber");
					this.OnCreditNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PeriodPerWeek", DbType="Int NOT NULL")]
		public int PeriodPerWeek
		{
			get
			{
				return this._PeriodPerWeek;
			}
			set
			{
				if ((this._PeriodPerWeek != value))
				{
					this.OnPeriodPerWeekChanging(value);
					this.SendPropertyChanging();
					this._PeriodPerWeek = value;
					this.SendPropertyChanged("PeriodPerWeek");
					this.OnPeriodPerWeekChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DepartmentID", DbType="Int")]
		public System.Nullable<int> DepartmentID
		{
			get
			{
				return this._DepartmentID;
			}
			set
			{
				if ((this._DepartmentID != value))
				{
					if (this._Department.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnDepartmentIDChanging(value);
					this.SendPropertyChanging();
					this._DepartmentID = value;
					this.SendPropertyChanged("DepartmentID");
					this.OnDepartmentIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Discipline_Course", Storage="_Courses", ThisKey="DisciplineID", OtherKey="DisciplineID")]
		public EntitySet<Course> Courses
		{
			get
			{
				return this._Courses;
			}
			set
			{
				this._Courses.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Department_Discipline", Storage="_Department", ThisKey="DepartmentID", OtherKey="DepartmentID", IsForeignKey=true)]
		public Department Department
		{
			get
			{
				return this._Department.Entity;
			}
			set
			{
				Department previousValue = this._Department.Entity;
				if (((previousValue != value) 
							|| (this._Department.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Department.Entity = null;
						previousValue.Disciplines.Remove(this);
					}
					this._Department.Entity = value;
					if ((value != null))
					{
						value.Disciplines.Add(this);
						this._DepartmentID = value.DepartmentID;
					}
					else
					{
						this._DepartmentID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Department");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Courses(Course entity)
		{
			this.SendPropertyChanging();
			entity.Discipline = this;
		}
		
		private void detach_Courses(Course entity)
		{
			this.SendPropertyChanging();
			entity.Discipline = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.House")]
	public partial class House : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _HouseID;
		
		private string _HouseName;
		
		private string _Description;
		
		private EntitySet<Student> _Students;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnHouseIDChanging(int value);
    partial void OnHouseIDChanged();
    partial void OnHouseNameChanging(string value);
    partial void OnHouseNameChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    #endregion
		
		public House()
		{
			this._Students = new EntitySet<Student>(new Action<Student>(this.attach_Students), new Action<Student>(this.detach_Students));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_HouseID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int HouseID
		{
			get
			{
				return this._HouseID;
			}
			set
			{
				if ((this._HouseID != value))
				{
					this.OnHouseIDChanging(value);
					this.SendPropertyChanging();
					this._HouseID = value;
					this.SendPropertyChanged("HouseID");
					this.OnHouseIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_HouseName", DbType="VarChar(100) NOT NULL", CanBeNull=false)]
		public string HouseName
		{
			get
			{
				return this._HouseName;
			}
			set
			{
				if ((this._HouseName != value))
				{
					this.OnHouseNameChanging(value);
					this.SendPropertyChanging();
					this._HouseName = value;
					this.SendPropertyChanged("HouseName");
					this.OnHouseNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="VarChar(1000) NOT NULL", CanBeNull=false)]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="House_Student", Storage="_Students", ThisKey="HouseID", OtherKey="HouseID")]
		public EntitySet<Student> Students
		{
			get
			{
				return this._Students;
			}
			set
			{
				this._Students.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Students(Student entity)
		{
			this.SendPropertyChanging();
			entity.House = this;
		}
		
		private void detach_Students(Student entity)
		{
			this.SendPropertyChanging();
			entity.House = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Semester")]
	public partial class Semester : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _SemesterID;
		
		private string _Time;
		
		private EntitySet<Course> _Courses;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnSemesterIDChanging(int value);
    partial void OnSemesterIDChanged();
    partial void OnTimeChanging(string value);
    partial void OnTimeChanged();
    #endregion
		
		public Semester()
		{
			this._Courses = new EntitySet<Course>(new Action<Course>(this.attach_Courses), new Action<Course>(this.detach_Courses));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SemesterID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int SemesterID
		{
			get
			{
				return this._SemesterID;
			}
			set
			{
				if ((this._SemesterID != value))
				{
					this.OnSemesterIDChanging(value);
					this.SendPropertyChanging();
					this._SemesterID = value;
					this.SendPropertyChanged("SemesterID");
					this.OnSemesterIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Time", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Time
		{
			get
			{
				return this._Time;
			}
			set
			{
				if ((this._Time != value))
				{
					this.OnTimeChanging(value);
					this.SendPropertyChanging();
					this._Time = value;
					this.SendPropertyChanged("Time");
					this.OnTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Semester_Course", Storage="_Courses", ThisKey="SemesterID", OtherKey="SemesterID")]
		public EntitySet<Course> Courses
		{
			get
			{
				return this._Courses;
			}
			set
			{
				this._Courses.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Courses(Course entity)
		{
			this.SendPropertyChanging();
			entity.Semester = this;
		}
		
		private void detach_Courses(Course entity)
		{
			this.SendPropertyChanging();
			entity.Semester = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Session")]
	public partial class Session : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _CourseID;
		
		private int _SessionID;
		
		private int _Classroom;
		
		private int _Weekday;
		
		private int _PeriodNumber;
		
		private int _StartingPeriod;
		
		private EntityRef<Course> _Course;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCourseIDChanging(int value);
    partial void OnCourseIDChanged();
    partial void OnSessionIDChanging(int value);
    partial void OnSessionIDChanged();
    partial void OnClassroomChanging(int value);
    partial void OnClassroomChanged();
    partial void OnWeekdayChanging(int value);
    partial void OnWeekdayChanged();
    partial void OnPeriodNumberChanging(int value);
    partial void OnPeriodNumberChanged();
    partial void OnStartingPeriodChanging(int value);
    partial void OnStartingPeriodChanged();
    #endregion
		
		public Session()
		{
			this._Course = default(EntityRef<Course>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CourseID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int CourseID
		{
			get
			{
				return this._CourseID;
			}
			set
			{
				if ((this._CourseID != value))
				{
					if (this._Course.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCourseIDChanging(value);
					this.SendPropertyChanging();
					this._CourseID = value;
					this.SendPropertyChanged("CourseID");
					this.OnCourseIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SessionID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int SessionID
		{
			get
			{
				return this._SessionID;
			}
			set
			{
				if ((this._SessionID != value))
				{
					this.OnSessionIDChanging(value);
					this.SendPropertyChanging();
					this._SessionID = value;
					this.SendPropertyChanged("SessionID");
					this.OnSessionIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Classroom", DbType="Int NOT NULL")]
		public int Classroom
		{
			get
			{
				return this._Classroom;
			}
			set
			{
				if ((this._Classroom != value))
				{
					this.OnClassroomChanging(value);
					this.SendPropertyChanging();
					this._Classroom = value;
					this.SendPropertyChanged("Classroom");
					this.OnClassroomChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Weekday", DbType="Int NOT NULL")]
		public int Weekday
		{
			get
			{
				return this._Weekday;
			}
			set
			{
				if ((this._Weekday != value))
				{
					this.OnWeekdayChanging(value);
					this.SendPropertyChanging();
					this._Weekday = value;
					this.SendPropertyChanged("Weekday");
					this.OnWeekdayChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PeriodNumber", DbType="Int NOT NULL")]
		public int PeriodNumber
		{
			get
			{
				return this._PeriodNumber;
			}
			set
			{
				if ((this._PeriodNumber != value))
				{
					this.OnPeriodNumberChanging(value);
					this.SendPropertyChanging();
					this._PeriodNumber = value;
					this.SendPropertyChanged("PeriodNumber");
					this.OnPeriodNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StartingPeriod", DbType="Int NOT NULL")]
		public int StartingPeriod
		{
			get
			{
				return this._StartingPeriod;
			}
			set
			{
				if ((this._StartingPeriod != value))
				{
					this.OnStartingPeriodChanging(value);
					this.SendPropertyChanging();
					this._StartingPeriod = value;
					this.SendPropertyChanged("StartingPeriod");
					this.OnStartingPeriodChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Course_Session", Storage="_Course", ThisKey="CourseID", OtherKey="CourseID", IsForeignKey=true)]
		public Course Course
		{
			get
			{
				return this._Course.Entity;
			}
			set
			{
				Course previousValue = this._Course.Entity;
				if (((previousValue != value) 
							|| (this._Course.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Course.Entity = null;
						previousValue.Sessions.Remove(this);
					}
					this._Course.Entity = value;
					if ((value != null))
					{
						value.Sessions.Add(this);
						this._CourseID = value.CourseID;
					}
					else
					{
						this._CourseID = default(int);
					}
					this.SendPropertyChanged("Course");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Staff")]
	public partial class Staff : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _StaffID;
		
		private string _FirstName;
		
		private string _LastName;
		
		private string _MmailAddress;
		
		private string _Nationality;
		
		private int _MagicalSecurityNumber;
		
		private int _DepartmentID;
		
		private bool _Female;
		
		private string _UserName;
		
		private string _Password;
		
		private EntitySet<Article> _Articles;
		
		private EntitySet<Course> _Courses;
		
		private EntitySet<Department> _Departments;
		
		private EntityRef<Department> _Department;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnStaffIDChanging(int value);
    partial void OnStaffIDChanged();
    partial void OnFirstNameChanging(string value);
    partial void OnFirstNameChanged();
    partial void OnLastNameChanging(string value);
    partial void OnLastNameChanged();
    partial void OnMmailAddressChanging(string value);
    partial void OnMmailAddressChanged();
    partial void OnNationalityChanging(string value);
    partial void OnNationalityChanged();
    partial void OnMagicalSecurityNumberChanging(int value);
    partial void OnMagicalSecurityNumberChanged();
    partial void OnDepartmentIDChanging(int value);
    partial void OnDepartmentIDChanged();
    partial void OnFemaleChanging(bool value);
    partial void OnFemaleChanged();
    partial void OnUserNameChanging(string value);
    partial void OnUserNameChanged();
    partial void OnPasswordChanging(string value);
    partial void OnPasswordChanged();
    #endregion
		
		public Staff()
		{
			this._Articles = new EntitySet<Article>(new Action<Article>(this.attach_Articles), new Action<Article>(this.detach_Articles));
			this._Courses = new EntitySet<Course>(new Action<Course>(this.attach_Courses), new Action<Course>(this.detach_Courses));
			this._Departments = new EntitySet<Department>(new Action<Department>(this.attach_Departments), new Action<Department>(this.detach_Departments));
			this._Department = default(EntityRef<Department>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StaffID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int StaffID
		{
			get
			{
				return this._StaffID;
			}
			set
			{
				if ((this._StaffID != value))
				{
					this.OnStaffIDChanging(value);
					this.SendPropertyChanging();
					this._StaffID = value;
					this.SendPropertyChanged("StaffID");
					this.OnStaffIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FirstName", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string FirstName
		{
			get
			{
				return this._FirstName;
			}
			set
			{
				if ((this._FirstName != value))
				{
					this.OnFirstNameChanging(value);
					this.SendPropertyChanging();
					this._FirstName = value;
					this.SendPropertyChanged("FirstName");
					this.OnFirstNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LastName", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string LastName
		{
			get
			{
				return this._LastName;
			}
			set
			{
				if ((this._LastName != value))
				{
					this.OnLastNameChanging(value);
					this.SendPropertyChanging();
					this._LastName = value;
					this.SendPropertyChanged("LastName");
					this.OnLastNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MmailAddress", DbType="VarChar(100)")]
		public string MmailAddress
		{
			get
			{
				return this._MmailAddress;
			}
			set
			{
				if ((this._MmailAddress != value))
				{
					this.OnMmailAddressChanging(value);
					this.SendPropertyChanging();
					this._MmailAddress = value;
					this.SendPropertyChanged("MmailAddress");
					this.OnMmailAddressChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Nationality", DbType="VarChar(100) NOT NULL", CanBeNull=false)]
		public string Nationality
		{
			get
			{
				return this._Nationality;
			}
			set
			{
				if ((this._Nationality != value))
				{
					this.OnNationalityChanging(value);
					this.SendPropertyChanging();
					this._Nationality = value;
					this.SendPropertyChanged("Nationality");
					this.OnNationalityChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MagicalSecurityNumber", DbType="Int NOT NULL")]
		public int MagicalSecurityNumber
		{
			get
			{
				return this._MagicalSecurityNumber;
			}
			set
			{
				if ((this._MagicalSecurityNumber != value))
				{
					this.OnMagicalSecurityNumberChanging(value);
					this.SendPropertyChanging();
					this._MagicalSecurityNumber = value;
					this.SendPropertyChanged("MagicalSecurityNumber");
					this.OnMagicalSecurityNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DepartmentID", DbType="Int NOT NULL")]
		public int DepartmentID
		{
			get
			{
				return this._DepartmentID;
			}
			set
			{
				if ((this._DepartmentID != value))
				{
					if (this._Department.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnDepartmentIDChanging(value);
					this.SendPropertyChanging();
					this._DepartmentID = value;
					this.SendPropertyChanged("DepartmentID");
					this.OnDepartmentIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Female", DbType="Bit NOT NULL")]
		public bool Female
		{
			get
			{
				return this._Female;
			}
			set
			{
				if ((this._Female != value))
				{
					this.OnFemaleChanging(value);
					this.SendPropertyChanging();
					this._Female = value;
					this.SendPropertyChanged("Female");
					this.OnFemaleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserName", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string UserName
		{
			get
			{
				return this._UserName;
			}
			set
			{
				if ((this._UserName != value))
				{
					this.OnUserNameChanging(value);
					this.SendPropertyChanging();
					this._UserName = value;
					this.SendPropertyChanged("UserName");
					this.OnUserNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Password", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Password
		{
			get
			{
				return this._Password;
			}
			set
			{
				if ((this._Password != value))
				{
					this.OnPasswordChanging(value);
					this.SendPropertyChanging();
					this._Password = value;
					this.SendPropertyChanged("Password");
					this.OnPasswordChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Staff_Article", Storage="_Articles", ThisKey="StaffID", OtherKey="StaffID")]
		public EntitySet<Article> Articles
		{
			get
			{
				return this._Articles;
			}
			set
			{
				this._Articles.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Staff_Course", Storage="_Courses", ThisKey="StaffID", OtherKey="StaffID")]
		public EntitySet<Course> Courses
		{
			get
			{
				return this._Courses;
			}
			set
			{
				this._Courses.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Staff_Department", Storage="_Departments", ThisKey="StaffID", OtherKey="DepartmentDeanID")]
		public EntitySet<Department> Departments
		{
			get
			{
				return this._Departments;
			}
			set
			{
				this._Departments.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Department_Staff", Storage="_Department", ThisKey="DepartmentID", OtherKey="DepartmentID", IsForeignKey=true)]
		public Department Department
		{
			get
			{
				return this._Department.Entity;
			}
			set
			{
				Department previousValue = this._Department.Entity;
				if (((previousValue != value) 
							|| (this._Department.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Department.Entity = null;
						previousValue.Staffs.Remove(this);
					}
					this._Department.Entity = value;
					if ((value != null))
					{
						value.Staffs.Add(this);
						this._DepartmentID = value.DepartmentID;
					}
					else
					{
						this._DepartmentID = default(int);
					}
					this.SendPropertyChanged("Department");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Articles(Article entity)
		{
			this.SendPropertyChanging();
			entity.Staff = this;
		}
		
		private void detach_Articles(Article entity)
		{
			this.SendPropertyChanging();
			entity.Staff = null;
		}
		
		private void attach_Courses(Course entity)
		{
			this.SendPropertyChanging();
			entity.Staff = this;
		}
		
		private void detach_Courses(Course entity)
		{
			this.SendPropertyChanging();
			entity.Staff = null;
		}
		
		private void attach_Departments(Department entity)
		{
			this.SendPropertyChanging();
			entity.Staff = this;
		}
		
		private void detach_Departments(Department entity)
		{
			this.SendPropertyChanging();
			entity.Staff = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Student")]
	public partial class Student : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _StudentID;
		
		private int _MagicalSecurityNumber;
		
		private int _DepartmentID;
		
		private string _MmailAddress;
		
		private string _FirstName;
		
		private string _LastName;
		
		private string _Nationality;
		
		private bool _Female;
		
		private System.Nullable<int> _AcquiredCreditNumber;
		
		private System.Nullable<double> _GradePointAverage;
		
		private string _UserName;
		
		private string _Password;
		
		private int _HouseID;
		
		private EntitySet<StudentRequest> _StudentRequests;
		
		private EntitySet<StudentInCourse> _StudentInCourses;
		
		private EntityRef<Department> _Department;
		
		private EntityRef<House> _House;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnStudentIDChanging(int value);
    partial void OnStudentIDChanged();
    partial void OnMagicalSecurityNumberChanging(int value);
    partial void OnMagicalSecurityNumberChanged();
    partial void OnDepartmentIDChanging(int value);
    partial void OnDepartmentIDChanged();
    partial void OnMmailAddressChanging(string value);
    partial void OnMmailAddressChanged();
    partial void OnFirstNameChanging(string value);
    partial void OnFirstNameChanged();
    partial void OnLastNameChanging(string value);
    partial void OnLastNameChanged();
    partial void OnNationalityChanging(string value);
    partial void OnNationalityChanged();
    partial void OnFemaleChanging(bool value);
    partial void OnFemaleChanged();
    partial void OnAcquiredCreditNumberChanging(System.Nullable<int> value);
    partial void OnAcquiredCreditNumberChanged();
    partial void OnGradePointAverageChanging(System.Nullable<double> value);
    partial void OnGradePointAverageChanged();
    partial void OnUserNameChanging(string value);
    partial void OnUserNameChanged();
    partial void OnPasswordChanging(string value);
    partial void OnPasswordChanged();
    partial void OnHouseIDChanging(int value);
    partial void OnHouseIDChanged();
    #endregion
		
		public Student()
		{
			this._StudentRequests = new EntitySet<StudentRequest>(new Action<StudentRequest>(this.attach_StudentRequests), new Action<StudentRequest>(this.detach_StudentRequests));
			this._StudentInCourses = new EntitySet<StudentInCourse>(new Action<StudentInCourse>(this.attach_StudentInCourses), new Action<StudentInCourse>(this.detach_StudentInCourses));
			this._Department = default(EntityRef<Department>);
			this._House = default(EntityRef<House>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StudentID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int StudentID
		{
			get
			{
				return this._StudentID;
			}
			set
			{
				if ((this._StudentID != value))
				{
					this.OnStudentIDChanging(value);
					this.SendPropertyChanging();
					this._StudentID = value;
					this.SendPropertyChanged("StudentID");
					this.OnStudentIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MagicalSecurityNumber", DbType="Int NOT NULL")]
		public int MagicalSecurityNumber
		{
			get
			{
				return this._MagicalSecurityNumber;
			}
			set
			{
				if ((this._MagicalSecurityNumber != value))
				{
					this.OnMagicalSecurityNumberChanging(value);
					this.SendPropertyChanging();
					this._MagicalSecurityNumber = value;
					this.SendPropertyChanged("MagicalSecurityNumber");
					this.OnMagicalSecurityNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DepartmentID", DbType="Int NOT NULL")]
		public int DepartmentID
		{
			get
			{
				return this._DepartmentID;
			}
			set
			{
				if ((this._DepartmentID != value))
				{
					if (this._Department.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnDepartmentIDChanging(value);
					this.SendPropertyChanging();
					this._DepartmentID = value;
					this.SendPropertyChanged("DepartmentID");
					this.OnDepartmentIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MmailAddress", DbType="VarChar(100)")]
		public string MmailAddress
		{
			get
			{
				return this._MmailAddress;
			}
			set
			{
				if ((this._MmailAddress != value))
				{
					this.OnMmailAddressChanging(value);
					this.SendPropertyChanging();
					this._MmailAddress = value;
					this.SendPropertyChanged("MmailAddress");
					this.OnMmailAddressChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FirstName", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string FirstName
		{
			get
			{
				return this._FirstName;
			}
			set
			{
				if ((this._FirstName != value))
				{
					this.OnFirstNameChanging(value);
					this.SendPropertyChanging();
					this._FirstName = value;
					this.SendPropertyChanged("FirstName");
					this.OnFirstNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LastName", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string LastName
		{
			get
			{
				return this._LastName;
			}
			set
			{
				if ((this._LastName != value))
				{
					this.OnLastNameChanging(value);
					this.SendPropertyChanging();
					this._LastName = value;
					this.SendPropertyChanged("LastName");
					this.OnLastNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Nationality", DbType="VarChar(100) NOT NULL", CanBeNull=false)]
		public string Nationality
		{
			get
			{
				return this._Nationality;
			}
			set
			{
				if ((this._Nationality != value))
				{
					this.OnNationalityChanging(value);
					this.SendPropertyChanging();
					this._Nationality = value;
					this.SendPropertyChanged("Nationality");
					this.OnNationalityChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Female", DbType="Bit NOT NULL")]
		public bool Female
		{
			get
			{
				return this._Female;
			}
			set
			{
				if ((this._Female != value))
				{
					this.OnFemaleChanging(value);
					this.SendPropertyChanging();
					this._Female = value;
					this.SendPropertyChanged("Female");
					this.OnFemaleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AcquiredCreditNumber", DbType="Int")]
		public System.Nullable<int> AcquiredCreditNumber
		{
			get
			{
				return this._AcquiredCreditNumber;
			}
			set
			{
				if ((this._AcquiredCreditNumber != value))
				{
					this.OnAcquiredCreditNumberChanging(value);
					this.SendPropertyChanging();
					this._AcquiredCreditNumber = value;
					this.SendPropertyChanged("AcquiredCreditNumber");
					this.OnAcquiredCreditNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GradePointAverage", DbType="Float")]
		public System.Nullable<double> GradePointAverage
		{
			get
			{
				return this._GradePointAverage;
			}
			set
			{
				if ((this._GradePointAverage != value))
				{
					this.OnGradePointAverageChanging(value);
					this.SendPropertyChanging();
					this._GradePointAverage = value;
					this.SendPropertyChanged("GradePointAverage");
					this.OnGradePointAverageChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserName", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string UserName
		{
			get
			{
				return this._UserName;
			}
			set
			{
				if ((this._UserName != value))
				{
					this.OnUserNameChanging(value);
					this.SendPropertyChanging();
					this._UserName = value;
					this.SendPropertyChanged("UserName");
					this.OnUserNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Password", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Password
		{
			get
			{
				return this._Password;
			}
			set
			{
				if ((this._Password != value))
				{
					this.OnPasswordChanging(value);
					this.SendPropertyChanging();
					this._Password = value;
					this.SendPropertyChanged("Password");
					this.OnPasswordChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_HouseID", DbType="Int NOT NULL")]
		public int HouseID
		{
			get
			{
				return this._HouseID;
			}
			set
			{
				if ((this._HouseID != value))
				{
					if (this._House.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnHouseIDChanging(value);
					this.SendPropertyChanging();
					this._HouseID = value;
					this.SendPropertyChanged("HouseID");
					this.OnHouseIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Student_StudentRequest", Storage="_StudentRequests", ThisKey="StudentID", OtherKey="StudentID")]
		public EntitySet<StudentRequest> StudentRequests
		{
			get
			{
				return this._StudentRequests;
			}
			set
			{
				this._StudentRequests.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Student_StudentInCourse", Storage="_StudentInCourses", ThisKey="StudentID", OtherKey="StudentID")]
		public EntitySet<StudentInCourse> StudentInCourses
		{
			get
			{
				return this._StudentInCourses;
			}
			set
			{
				this._StudentInCourses.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Department_Student", Storage="_Department", ThisKey="DepartmentID", OtherKey="DepartmentID", IsForeignKey=true)]
		public Department Department
		{
			get
			{
				return this._Department.Entity;
			}
			set
			{
				Department previousValue = this._Department.Entity;
				if (((previousValue != value) 
							|| (this._Department.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Department.Entity = null;
						previousValue.Students.Remove(this);
					}
					this._Department.Entity = value;
					if ((value != null))
					{
						value.Students.Add(this);
						this._DepartmentID = value.DepartmentID;
					}
					else
					{
						this._DepartmentID = default(int);
					}
					this.SendPropertyChanged("Department");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="House_Student", Storage="_House", ThisKey="HouseID", OtherKey="HouseID", IsForeignKey=true)]
		public House House
		{
			get
			{
				return this._House.Entity;
			}
			set
			{
				House previousValue = this._House.Entity;
				if (((previousValue != value) 
							|| (this._House.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._House.Entity = null;
						previousValue.Students.Remove(this);
					}
					this._House.Entity = value;
					if ((value != null))
					{
						value.Students.Add(this);
						this._HouseID = value.HouseID;
					}
					else
					{
						this._HouseID = default(int);
					}
					this.SendPropertyChanged("House");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_StudentRequests(StudentRequest entity)
		{
			this.SendPropertyChanging();
			entity.Student = this;
		}
		
		private void detach_StudentRequests(StudentRequest entity)
		{
			this.SendPropertyChanging();
			entity.Student = null;
		}
		
		private void attach_StudentInCourses(StudentInCourse entity)
		{
			this.SendPropertyChanging();
			entity.Student = this;
		}
		
		private void detach_StudentInCourses(StudentInCourse entity)
		{
			this.SendPropertyChanging();
			entity.Student = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.StudentInCourse")]
	public partial class StudentInCourse : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _StudentID;
		
		private int _CourseID;
		
		private string _CourseGPA;
		
		private EntityRef<Course> _Course;
		
		private EntityRef<Student> _Student;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnStudentIDChanging(int value);
    partial void OnStudentIDChanged();
    partial void OnCourseIDChanging(int value);
    partial void OnCourseIDChanged();
    partial void OnCourseGPAChanging(string value);
    partial void OnCourseGPAChanged();
    #endregion
		
		public StudentInCourse()
		{
			this._Course = default(EntityRef<Course>);
			this._Student = default(EntityRef<Student>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StudentID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int StudentID
		{
			get
			{
				return this._StudentID;
			}
			set
			{
				if ((this._StudentID != value))
				{
					if (this._Student.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnStudentIDChanging(value);
					this.SendPropertyChanging();
					this._StudentID = value;
					this.SendPropertyChanged("StudentID");
					this.OnStudentIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CourseID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int CourseID
		{
			get
			{
				return this._CourseID;
			}
			set
			{
				if ((this._CourseID != value))
				{
					if (this._Course.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCourseIDChanging(value);
					this.SendPropertyChanging();
					this._CourseID = value;
					this.SendPropertyChanged("CourseID");
					this.OnCourseIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CourseGPA", DbType="VarChar(10)")]
		public string CourseGPA
		{
			get
			{
				return this._CourseGPA;
			}
			set
			{
				if ((this._CourseGPA != value))
				{
					this.OnCourseGPAChanging(value);
					this.SendPropertyChanging();
					this._CourseGPA = value;
					this.SendPropertyChanged("CourseGPA");
					this.OnCourseGPAChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Course_StudentInCourse", Storage="_Course", ThisKey="CourseID", OtherKey="CourseID", IsForeignKey=true)]
		public Course Course
		{
			get
			{
				return this._Course.Entity;
			}
			set
			{
				Course previousValue = this._Course.Entity;
				if (((previousValue != value) 
							|| (this._Course.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Course.Entity = null;
						previousValue.StudentInCourses.Remove(this);
					}
					this._Course.Entity = value;
					if ((value != null))
					{
						value.StudentInCourses.Add(this);
						this._CourseID = value.CourseID;
					}
					else
					{
						this._CourseID = default(int);
					}
					this.SendPropertyChanged("Course");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Student_StudentInCourse", Storage="_Student", ThisKey="StudentID", OtherKey="StudentID", IsForeignKey=true)]
		public Student Student
		{
			get
			{
				return this._Student.Entity;
			}
			set
			{
				Student previousValue = this._Student.Entity;
				if (((previousValue != value) 
							|| (this._Student.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Student.Entity = null;
						previousValue.StudentInCourses.Remove(this);
					}
					this._Student.Entity = value;
					if ((value != null))
					{
						value.StudentInCourses.Add(this);
						this._StudentID = value.StudentID;
					}
					else
					{
						this._StudentID = default(int);
					}
					this.SendPropertyChanged("Student");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
